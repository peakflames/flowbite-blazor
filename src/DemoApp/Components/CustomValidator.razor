@using Microsoft.AspNetCore.Components.Forms

@implements IDisposable

@code {
    private ValidationMessageStore? messageStore;

    [CascadingParameter]
    private EditContext? CurrentEditContext { get; set; }

    protected override void OnInitialized()
    {
        if (CurrentEditContext is null)
        {
            throw new InvalidOperationException(
                $"{nameof(CustomValidator)} requires a cascading parameter of type {nameof(EditContext)}. " +
                $"For example, you can use {nameof(CustomValidator)} inside an EditForm.");
        }

        messageStore = new(CurrentEditContext);

        CurrentEditContext.OnValidationRequested += HandleValidationRequested;
        CurrentEditContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs args)
    {
        messageStore?.Clear(args.FieldIdentifier);
    }

    public void DisplayError(string field, string errorMessage)
    {
        if (CurrentEditContext is not null)
        {
            var fieldIdentifier = new FieldIdentifier(CurrentEditContext.Model, field);
            messageStore?.Add(fieldIdentifier, errorMessage);
            CurrentEditContext.NotifyValidationStateChanged();
        }
    }

    public void ClearErrors()
    {
        messageStore?.Clear();
        CurrentEditContext?.NotifyValidationStateChanged();
    }

    void IDisposable.Dispose()
    {
        if (CurrentEditContext is not null)
        {
            CurrentEditContext.OnValidationRequested -= HandleValidationRequested;
            CurrentEditContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}
